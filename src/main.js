import { portfolioData } from "./jsData/portfolio.js";

let SLIDES_PER_PAGE_PORTFOLIO = 3;
const screenWidth = window.screen.width;
if (screenWidth <= 1100) {
  SLIDES_PER_PAGE_PORTFOLIO = 2;
}
if (screenWidth <= 600) {
  SLIDES_PER_PAGE_PORTFOLIO = 1;
}

let currentSlideIndexPortfolio = 0;

function initPortfolioSlider() {
  const slidesContainer = document.querySelector("#portfolio-slides");
  const buttonPrevPortfolio = document.querySelector(
    ".controls-portfolio-prev"
  );
  const buttonNextPortfolio = document.querySelector(
    ".controls-portfolio-next"
  );
  const indicatorsPortfolio = document.querySelector(".indicators-portfolio");

  function createPortfolioBlock(project) {
    // Skip empty projects
    if (!project.title) return "";

    return `
      <div class="portfolio-slide-block">
        <img src="${project.img}" alt="" class="portfolio-slide-block-img">
        <div class="portfolio-slide-block-type">
          ${project.type
            .map(
              (el) => `<p class="portfolio-slide-block-type-element">${el}</p>`
            )
            .join("")}
        </div>
        <h2 class="portfolio-slide-block-title">${project.title}</h2>
        <h2 class="portfolio-slide-block-subtitle">${project.subTitle}</h2>
        <p class="portfolio-slide-block-text text-s">${project.text}</p>
      </div>
    `;
  }

  function updateSlides() {
    const filteredProjects = portfolioData.filter((project) => project.title);
    const totalSlides = Math.ceil(
      filteredProjects.length / SLIDES_PER_PAGE_PORTFOLIO
    );
    const currentSlide = document.querySelector(".portfolio-slide.active");

    // Create new slide
    const newSlide = document.createElement("div");
    newSlide.className = "portfolio-slide";

    const startIdx = currentSlideIndexPortfolio * SLIDES_PER_PAGE_PORTFOLIO;
    const endIdx = Math.min(
      startIdx + SLIDES_PER_PAGE_PORTFOLIO,
      filteredProjects.length
    );

    const slideContent = filteredProjects
      .slice(startIdx, endIdx)
      .map((project) => createPortfolioBlock(project))
      .join("");

    newSlide.innerHTML = `<div class="slide-blocks">${slideContent}</div>`;

    // Add new slide to container
    if (currentSlide) {
      // Fade out current slide
      currentSlide.style.opacity = "0";
      currentSlide.style.visibility = "hidden";

      // Wait for fade out animation
      setTimeout(() => {
        currentSlide.remove();
        slidesContainer.appendChild(newSlide);

        // Trigger reflow
        void newSlide.offsetWidth;

        // Add active class to trigger fade in
        newSlide.classList.add("active");
      }, 200);
    } else {
      slidesContainer.appendChild(newSlide);
      setTimeout(() => {
        newSlide.classList.add("active");
      }, 0);
    }

    updatePagination(totalSlides);
  }

  function updatePagination(totalSlides) {
    indicatorsPortfolio.innerHTML = "";

    if (totalSlides <= 5) {
      for (let i = 0; i < totalSlides; i++) {
        addPageButton(i);
      }
    } else {
      if (currentSlideIndexPortfolio > 2) {
        addPageButton(0);
        addEllipsis();
      }

      for (
        let i = Math.max(0, currentSlideIndexPortfolio - 1);
        i <= Math.min(totalSlides - 1, currentSlideIndexPortfolio + 1);
        i++
      ) {
        addPageButton(i);
      }

      if (currentSlideIndexPortfolio < totalSlides - 3) {
        addEllipsis();
        addPageButton(totalSlides - 1);
      }
    }
  }

  function addPageButton(pageNum) {
    const button = document.createElement("div");
    button.className = `indicator-portfolio${
      pageNum === currentSlideIndexPortfolio ? " active" : ""
    }`;
    button.dataset.portfolio = pageNum;
    button.textContent = pageNum + 1;
    indicatorsPortfolio.appendChild(button);
  }

  function addEllipsis() {
    const span = document.createElement("span");
    span.textContent = "...";
    span.className = "pagination-ellipsis";
    indicatorsPortfolio.appendChild(span);
  }

  function nextSlide() {
    const filteredProjects = portfolioData.filter((project) => project.title);
    const totalSlides = Math.ceil(
      filteredProjects.length / SLIDES_PER_PAGE_PORTFOLIO
    );
    if (currentSlideIndexPortfolio < totalSlides - 1) {
      currentSlideIndexPortfolio++;
      updateSlides();
    }
  }

  function prevSlide() {
    if (currentSlideIndexPortfolio > 0) {
      currentSlideIndexPortfolio--;
      updateSlides();
    }
  }

  // Touch events
  let startX, endX;

  function handleTouchStart(event) {
    startX = event.touches[0].clientX;
  }

  function handleTouchMove(event) {
    endX = event.touches[0].clientX;
  }

  function handleTouchEnd() {
    if (!endX) return;

    const deltaX = endX - startX;
    if (Math.abs(deltaX) > 50) {
      if (deltaX < 0) {
        nextSlide();
      } else {
        prevSlide();
      }
    }
  }

  // Event Listeners
  buttonNextPortfolio.addEventListener("click", nextSlide);
  buttonPrevPortfolio.addEventListener("click", prevSlide);

  indicatorsPortfolio.addEventListener("click", (event) => {
    const clickedIndicator = event.target;
    if (clickedIndicator.classList.contains("indicator-portfolio")) {
      currentSlideIndexPortfolio = parseInt(
        clickedIndicator.dataset.portfolio,
        10
      );
      updateSlides();
    }
  });

  slidesContainer.addEventListener("touchstart", handleTouchStart);
  slidesContainer.addEventListener("touchmove", handleTouchMove);
  slidesContainer.addEventListener("touchend", handleTouchEnd);

  // Initial render
  updateSlides();
}

document.addEventListener("DOMContentLoaded", initPortfolioSlider);

// Service Tabs

let currentTab = 0;

const tabs = document.querySelectorAll(".services-tab-title");
const content = document.querySelectorAll(".services-tabs-content");

const setCurrentTab = (id) => {
  currentTab = id;
};

tabs.forEach((el, i) => {
  if (currentTab === i) {
    el.classList.add("active");
  }
  el.addEventListener("click", () => {
    tabs.forEach((el) => {
      el.classList.remove("active");
    });
    setCurrentTab(i);
    content.forEach((el, i) => {
      el.classList.remove("active");
      if (currentTab === i) {
        el.classList.add("active");
      }
    });
    if (currentTab === i) {
      el.classList.add("active");
    }
  });
});

content.forEach((el, i) => {
  el.classList.remove("active");
  if (currentTab === i) {
    el.classList.add("active");
  }
});

// Form

const form = document.getElementById("form");
const TOKEN = "7621135433:AAH_kpzgrLQ8LQsPmyveqENpBnaY3qSwlQQ";
const CHAT_ID = "@abobusslslsl";
const URI_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

form.addEventListener("submit", (e) => {
  e.preventDefault();
  const nameInput = document.getElementById("name");
  const telInput = document.getElementById("tel");
  const reqInput = document.getElementById("req");

  const name = nameInput.value;
  const tel = telInput.value;
  const req = reqInput.value;

  const inputContents = [
    `<b>–ó–∞–ø–∏—Ç –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü—ñ—é</b>`,
    `<b>–Ü–º'—è:</b> ${name}`,
    `<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:</b> <a href="${tel}">${tel}</a>`,
    `<b>–ó–∞–ø–∏—Ç:</b> ${req}`,
  ];
  let message = inputContents.join("\n");

  fetch(URI_API, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
    },
    body: JSON.stringify({
      chat_id: CHAT_ID,
      parse_mode: "html",
      text: message,
    }),
  })
    .then((res) => {
      nameInput.value = "";
      telInput.value = "+380";
      reqInput.value = "";
    })
    .catch((error) => {
      console.log(error);
    });
});

const reviews = [
  {
    image: "images/testimonials/1.png",
    name: "–ù–∞–∑–∞—Ä",
    text: "–î–æ–±—Ä–∏–π –¥–µ–Ω—å –ß—É–¥–æ–≤–∞ –∫–æ–º—É–Ω—ñ–∫–∞—Ü—ñ—è, –¥–µ—Ç–∞–ª—å–Ω–µ –ø–æ—è—Å–Ω–µ–Ω–Ω—è –Ω–µ–∑—Ä–æ–∑—É–º—ñ–ª–∏—Ö –º–æ–º–µ–Ω—Ç—ñ–≤. –°–ø–æ–¥–æ–±–∞–ª–æ—Å—å –ø–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –¥–∏–∑–∞–π–Ω –ø—Ä–æ—Ç—è–≥–æ–º —Ä–æ–∑—Ä–æ–±–∫–∏, —Ü—ñ–∫–∞–≤–æ —Å–ø–æ—Å—Ç–µ—Ä—ñ–≥–∞—Ç–∏ —è–∫ –≤—ñ–Ω –∑–º—ñ–Ω—é—î—Ç—å—Å—è, –º–∞–∫–µ—Ç –ø—ñ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–π —á—ñ—Ç–∫–æ –¥–æ –ø–µ—Ä–µ–¥–∞—á—ñ, –≤—Å–µ —Ä–æ–∑–ø–æ–¥—ñ–ª–µ–Ω–æ, –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ –¥–æ–¥–∞–Ω—ñ, —Ä–æ–∑—Ä–æ–±–Ω–∏–∫ –ø–æ–¥—è–∫—É–≤–∞–≤ –∑–∞ —á—ñ—Ç–∫—ñ—Å—Ç—å —Ç–∞ –µ–∫–æ–Ω–æ–º—ñ—é —á–∞—Å—É –î—è–∫—É—é!",
  },
  {
    image: "images/testimonials/2.png",
    name: "–ú–∞–∫—Å",
    text: "I recently had the pleasure of collaborating with Arina on a website design project through Figma, and I must say, she did an outstanding job.Throughout the project, Arina was a pleasure to work with. She was receptive to my input and ideas, making sure to incorporate them into the design while providing valuable insights and recommendations based on her expertise.In summary, I am thrilled with the website design Arina created, and her exceptional talent in choosing colors has truly made a significant impact. If you are seeking a designer with a strong commitment to delivering outstanding results, I highly recommend working with Arina.Thank you, Arina, for your fantastic work!",
  },
  {
    image: "images/testimonials/3.png",
    name: "Olya Belladonna",
    text: "–ê—Ä–∏–Ω–∞, –¥—É–∂–µ –¥—è–∫—É—é –≤–∞–º –∑–∞ —Å–ø—ñ–≤–ø—Ä–∞—Ü—é! –ë—É–ª–æ –≤—Å–µ –¥—É–∂–µ –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ, —à–≤–∏–¥–Ω–æ, —è–∫—ñ—Å–Ω–æ —ñ –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ! –ü—Ä–∏—î–º–Ω–æ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ç–∞–∫–∏–º–∏ –ø—Ä–æ—Ñ–µ—Å—ñ–æ–Ω–∞–ª–∞–º–∏! ü•∞",
  },
  {
    image: "images/testimonials/4.png",
    name: "–í—ñ–∫—Ç–æ—Ä—ñ—è",
    text: "–°–ø–∞—Å–∏–±–æ –±–æ–ª—å—à–æ–µ, –ê—Ä–∏–Ω–æ—á–∫–∞, –∑–∞ —Ç–≤–æ—é —Ä–∞–±–æ—Ç—É! –ú–Ω–µ –±—ã–ª–æ –ø—Ä–∏—è—Ç–Ω–æ –∏–º–µ—Ç—å —Å —Ç–æ–±–æ–π –¥–µ–ª–æ! ü•∞ –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–∏ —Å—Ç–∞—Ä–∞–Ω–∏—è –∏ –∫—Ä–∞—Å–∏–≤—ã–π –≤–∫—É—Å, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã –¥–µ–ª–∏–ª–∞—Å—å! –ï—Å–ª–∏ —á—Ç–æ –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –±—É–¥–µ–º –¥–µ—Ä–∂–∞—Ç—å —Å–≤—è–∑—å",
  },
  {
    image: "images/testimonials/5.png",
    name: "–ù–∞—Ç–∞–ª—è",
    text: "–î—É–∂–µ —Å–ø–æ–¥–æ–±–∞–ª–∞—Å—å —Å–ø—ñ–≤–ø—Ä–∞—Ü—è –∑ –≤–∞–º–∏! –ú–∞—Å—à—Ç–∞–±–Ω–∏–π —Å–∞–π—Ç –∑—Ä–æ–±–∏—Ç–∏ –≤ –∫–æ—Ä–æ—Ç–∫—ñ —Å—Ç—Ä–æ–∫–∏ - —Ü–µ –¥—É–∂–µ –ø–æ–∫–∞–∑–æ–≤–æ, —è–∫ –¥–ª—è —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–∞. –ú–µ–Ω—ñ –¥–æ –≤–ø–æ–¥–æ–±–∏ –≤–∞—à—ñ —Å—Ç–∏–ª—å–æ–≤—ñ —Ä—ñ—à–µ–Ω–Ω—è, —è–∫–∏–º–∏ –≤–∏ –¥—ñ–ª–∏—Ç–µ—Å—å –≤–ø—Ä–æ–¥–æ–≤–∂ —Å–ø—ñ–≤–ø—Ä–∞—Ü—ñ, –Ω—ñ–±–∏ —è –π —Å–∫–∏–Ω—É–ª–∞ –≤—Å—å–æ–≥–æ —Ç—Ä–∏ –ø—Ä–∏–∫–ª–∞–¥–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–Ω—è, –∞–ª–µ –≤–∏ —Å—Ç–≤–æ—Ä–∏–ª–∏ –Ω–∞–±–∞–≥–∞—Ç–æ –∫—Ä–∞—â–µ –∫–æ–∂–Ω–æ–≥–æ –∑ –Ω–∏—Ö, —á–µ—Å–Ω–æ –∫–∞–∂—É! üòâ‚ù§Ô∏è –†–æ–∑—Ä–∞—Ö–æ–≤—É—é –Ω–∞ —Ç—Ä–∏–≤–∞–ª—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é —Ç–∞ –±–∞–∂–∞—é –Ω–∞—Å–Ω–∞–≥–∏ –≤ —Ä–æ–∑–≤–∏—Ç–∫—É!",
  },
  {
    image: "images/testimonials/6.png",
    name: "–ö–ª—ñ—î–Ω—Ç",
    text: "–û—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –¥–∏–∑–∞–π–Ω–µ—Ä–∞ –ê—Ä–∏–Ω—É! –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∑–∞–π–Ω–∞ —Å–¥–µ–ª–∞–Ω–∞ –∏ –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ",
  },
  {
    image: "images/testimonials/7.png",
    name: "–õ—é–±–æ–≤",
    text: "–î—É–∂–µ –ø–æ–¥–æ–±–∞—î—Ç—å—Å—è —Å–ø—ñ–≤–ø—Ä–∞—Ü—é–≤–∞—Ç–∏ –∑ —Ç–∞–∫–∏–º —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º —è–∫ –ê—Ä—ñ–Ω–∞. –í–∏–ø–∞–¥–∫–æ–≤–æ –∑–Ω–∞–π—à–ª–∞, –∞–ª–µ –≤ —Ç–µ–ª–µ—Ñ–æ–Ω–Ω—ñ–π —Ä–æ–∑–º–æ–≤—ñ –∑—Ä–∞–∑—É –≤—ñ–¥—á—É–ª–∞ —á—ñ—Ç–∫—ñ—Å—Ç—å —Ç–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–∏–π –ø—ñ–¥—Ö—ñ–¥ –≤ —Ä–æ–±–æ—Ç—ñ. –Ñ —Å–≤–æ—î –±–∞—á–µ–Ω–Ω—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó —Ç–∞ –ø–æ—Ä–∞–¥–∏, —â–æ –¥—É–∂–µ —Ü—ñ–Ω–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ —è –Ω–µ –∑ —Ü—ñ—î—ó —Å—Ñ–µ—Ä–∏, —ñ –≤–∞–∂–∫–æ –±—É–ª–æ –± —â–æ—Å—å –ø–µ—Ä–µ–¥–±–∞—á–∏—Ç–∏ —Ç–∞ –≤—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞–∑–¥–∞–ª–µ–≥—ñ–¥—å.–ß—ñ—Ç–∫–∞ —â–æ–¥–æ —Ç–µ—Ä–º—ñ–Ω—ñ–≤. –ú–∞–π–∂–µ –æ–¥—Ä–∞–∑—É –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î —ñ –Ω–µ –∑–≤–∞–∂–∞—é—á–∏, —â–æ —Ü–µ –≤–∂–µ 22:00+ (–∑–∞ —â–æ –º–µ–Ω—ñ —ñ —Å–æ—Ä–æ–º–Ω–æ).–î—É–∂–µ —Å–ø–æ–¥—ñ–≤–∞—é—Å—å –Ω–∞ –¥–æ–≤–≥—É —Å–ø—ñ–≤–ø—Ä–∞—Ü—é, –æ—Å–∫—ñ–ª—å–∫–∏ —î –±–∞–≥–∞—Ç–æ –ø–ª–∞–Ω—ñ–≤, —ñ —Ö–æ—á–µ—Ç—å—Å—è –≤—Ç—ñ–ª–∏—Ç–∏ —ó—Ö –≤ —Ä–µ–∞–ª—å–Ω—ñ—Å—Ç—å –∑ —Ç–∞–∫–∏–º —Å–ø–µ—Ü—ñ–∞–ª—ñ—Å—Ç–æ–º.",
  },
  {
    image: "images/testimonials/8.png",
    name: "–ö–ª—ñ—î–Ω—Ç",
    text: "–Ø –≤–∞–º –¥—É–∂–µ –¥—è–∫—É—é –∑–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—ñ—Å—Ç—å —ñ —ñ–¥–µ–∞–ª—å–Ω–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –º–æ–≥–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è —â–µ –π –≤ 10 –≤–µ—á–æ—Ä–∞ ü•∞–ë—É–¥—É –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ —â–µ)",
  },
  {
    image: "images/testimonials/9.png",
    name: "–õ—é–±–æ–≤",
    text: "–ê—Ä—ñ–Ω–∞. –Ø –ø—Ä–æ—Å—Ç–æ –≤ –∑–∞—Ö–≤–∞—Ç—ñ –≤—ñ–¥ —Ü—å–æ–≥–æ –ø–ª–∞–Ω–µ—Ä–∞. –í—ñ–Ω –ø–µ—Ä–µ–≤–µ—Ä—à–∏–≤ 100/100 –º–æ—ó—Ö –æ—á—ñ–∫—É–≤–∞–Ω—å. –ú–µ–Ω—ñ –¥—É–∂–µ —Å–ø–æ–¥–æ–±–∞–ª–∞—Å—å —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω—ñ—Å—Ç—å –π–æ–≥–æ, –Ω–∞–ø–æ–≤–Ω–µ–Ω–Ω—è, —ñ –µ—Å—Ç–µ—Ç–∏–∫–∞. –Ø –¥—É–∂–µ –∑–∞–¥–æ–≤–æ–ª–µ–Ω–∞",
  },
  {
    image: "images/testimonials/10.png",
    name: "–î–∞—à–∞",
    text: "–í–∏ –≥–∞—Ä–Ω–æ –ø—Ä–∞—Ü—é—î—Ç–µ —ñ –¥—É–∂–µ —à–≤–∏–¥–∫–æ, —â–æ –¥—É–∂–µ –∫–ª–∞—Å–Ω–æ. –°—Ç–∞–≤–ª—é 5 –∑—ñ—Ä–æ–∫ üòâ –Ø–∫—â–æ –∑–Ω–∞–π–æ–º–∏–º –∑–Ω–∞–¥–æ–±–ª—è—Ç—å—Å—è –ø–æ—Å–ª—É–≥–∏ –¥–∏–∑–∞–π–Ω–µ—Ä–∞, –æ–±–æ–≤ º—è–∑–∫–æ–≤–æ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞—Å",
  },
  {
    image: "images/testimonials/11.png",
    name: "–ö–ª—ñ—î–Ω—Ç",
    text: "–î—è–∫—É—é –∑–∞ —Ä–æ–±–æ—Ç—É, –∑—Ä–æ–±–∏–ª–∏ —è–∫—ñ—Å–Ω–æ, —à–≤–∏–¥–∫–æ, –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ. –ë—É–¥–µ–º–æ –∑–≤–µ—Ä—Ç–∞—Ç–∏—Å—å –≤ –º–∞–π–±—É—Ç–Ω—å–æ–º—É!",
  },
  {
    image: "images/testimonials/12.png",
    name: "–ö–∞—Ç–µ—Ä–∏–Ω–∞",
    text: "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è, –¥—è–∫—É—é –≤–∞–º –∑–∞ —Ä–æ–±–æ—Ç—É. –î—É–∂–µ —à–≤–∏–¥–∫–æ, —è–∫—ñ—Å–Ω–æ —ñ –∫—Ä–∞—Å–∏–≤–æ!",
  },
];
let SLIDES_PER_PAGE = 3;
// –í–∞—à –∫–æ–¥ –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏
if (screenWidth < 1100) {
  SLIDES_PER_PAGE = 2;
}
if (screenWidth < 665) {
  SLIDES_PER_PAGE = 1;
}
const MAX_TEXT_LENGTH = 142;
let currentSlide = 0;

function init() {
  const slidesContainer = document.querySelector(".testimonials-slides");
  const prevButton = document.querySelector(".controls-testimonials-prev");
  const nextButton = document.querySelector(".controls-testimonials-next");
  const indicators = document.querySelector(".indicators-testimonials");

  function truncateText(text, maxLength) {
    if (text.length <= maxLength) return text;
    return text.substring(0, maxLength) + "...";
  }

  function updateSlides() {
    const totalSlides = Math.ceil(reviews.length / SLIDES_PER_PAGE);
    const slideContent = document.querySelector(".testimonial-slide");

    // –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
    slideContent.style.opacity = "0";

    setTimeout(() => {
      slideContent.innerHTML = "";

      const startIdx = currentSlide * SLIDES_PER_PAGE;
      const endIdx = Math.min(startIdx + SLIDES_PER_PAGE, reviews.length);

      for (let i = startIdx; i < endIdx; i++) {
        const review = reviews[i];
        const block = document.createElement("div");
        block.className = "testimonial-slide-block";

        const isLongText = review.text.length > MAX_TEXT_LENGTH;
        const truncatedText = truncateText(review.text, MAX_TEXT_LENGTH);

        block.innerHTML = `
          <div class="">
            <div class="slide-block-top">
            <img src="${review.image}" />
            <h2 class="testimonial-slide-title">${review.name}</h2>
            </div>
            <p class="testimonial-slide-text">${truncatedText}</p>
            ${
              isLongText
                ? `<button class="read-more-btn">–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ</button>`
                : ""
            }
          </div>
        `;

        if (isLongText) {
          const readMoreBtn = block.querySelector(".read-more-btn");
          const textElement = block.querySelector(".testimonial-slide-text");
          let isExpanded = false;

          readMoreBtn.addEventListener("click", () => {
            isExpanded = !isExpanded;
            textElement.textContent = isExpanded ? review.text : truncatedText;
            readMoreBtn.textContent = isExpanded
              ? "–ó–≥–æ—Ä–Ω—É—Ç–∏"
              : "–ß–∏—Ç–∞—Ç–∏ –±—ñ–ª—å—à–µ...";
          });
        }

        slideContent.appendChild(block);
      }

      // –ü–æ–∫–∞–∑—É—î–º–æ –Ω–æ–≤–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç
      requestAnimationFrame(() => {
        slideContent.style.opacity = "1";
      });

      updatePagination(totalSlides);
    }, 250);
  }

  // –û–Ω–æ–≤–ª—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏ –ø–æ–¥—ñ–π –¥–ª—è –∫–Ω–æ–ø–æ–∫
  function initButtons(prevButton, nextButton) {
    prevButton.addEventListener("click", () => {
      if (currentSlide > 0) {
        currentSlide--;
        updateSlides();
      }
    });

    nextButton.addEventListener("click", () => {
      const totalSlides = Math.ceil(reviews.length / SLIDES_PER_PAGE);
      if (currentSlide < totalSlides - 1) {
        currentSlide++;
        updateSlides();
      }
    });
  }
  function updatePagination(totalSlides) {
    indicators.innerHTML = "";

    // Add page numbers
    if (totalSlides <= 5) {
      for (let i = 0; i < totalSlides; i++) {
        addPageButton(i, totalSlides);
      }
    } else {
      if (currentSlide > 2) {
        addPageButton(0, totalSlides);
        indicators.appendChild(createEllipsis());
      }

      for (
        let i = Math.max(0, currentSlide - 1);
        i <= Math.min(totalSlides - 1, currentSlide + 1);
        i++
      ) {
        addPageButton(i, totalSlides);
      }

      if (currentSlide < totalSlides - 3) {
        indicators.appendChild(createEllipsis());
        addPageButton(totalSlides - 1, totalSlides);
      }
    }
  }

  function addPageButton(pageNum, totalSlides) {
    const button = document.createElement("button");
    button.textContent = pageNum + 1;
    button.className = pageNum === currentSlide ? "active" : "";
    button.addEventListener("click", () => {
      currentSlide = pageNum;
      updateSlides();
    });
    indicators.appendChild(button);
  }

  function createEllipsis() {
    const span = document.createElement("span");
    span.textContent = "...";
    span.className = "pagination-ellipsis";
    return span;
  }

  prevButton.addEventListener("click", () => {
    if (currentSlide > 0) {
      currentSlide--;
      updateSlides();
    }
  });

  nextButton.addEventListener("click", () => {
    const totalSlides = Math.ceil(reviews.length / SLIDES_PER_PAGE);
    if (currentSlide < totalSlides - 1) {
      currentSlide++;
      updateSlides();
    }
  });

  updateSlides();
}

document.addEventListener("DOMContentLoaded", init);

const AccordeonTopButton = document.querySelectorAll(
  ".accordeon-item-top-button"
);

AccordeonTopButton.forEach((el) => {
  el.addEventListener("click", () => {
    const content = el.nextElementSibling;
    const img = el.lastElementChild;
    img.classList.toggle("active");

    if (content.style.maxHeight) {
      content.style.maxHeight = null;
      content.style.paddingTop = "0px";
    } else {
      content.style.paddingTop = "10px";
      content.style.maxHeight = content.scrollHeight + 10 + "px";
    }
  });
});

document.addEventListener("DOMContentLoaded", function () {
  const burger = document.querySelector(".custom-burger");
  const menu = document.querySelector(".sliding-menu");

  burger.addEventListener("click", function () {
    burger.classList.toggle("active");
    menu.classList.toggle("active");

    document.body.style.overflow = menu.classList.contains("active")
      ? "hidden"
      : "";
  });
});
